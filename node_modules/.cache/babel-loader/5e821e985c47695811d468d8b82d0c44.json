{"ast":null,"code":"var _jsxFileName = \"/Users/nicolas/ReactJS/pendu1/src/App.js\";\nimport './App.css';\nimport { Component } from 'react';\nimport Key from './Key';\nimport Word from './Word';\nimport Win from './Win';\nimport PenduPic from './PenduPic';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.INITIALE_STATE = {\n      keys: [...'ABCDEFGHIJKLMNOPQRSTUVWXYZ'].map(l => {\n        return {\n          value: l,\n          state: 'none'\n        };\n      }),\n      currentWord: 'MUUR',\n      lettersFound: [],\n      won: false\n    };\n    this.state = JSON.parse(JSON.stringify(this.INITIALE_STATE));\n  }\n\n  handleKeyClick(key) {\n    // Create copy of state variable\n    // that I'll change in this function\n    const keys = [...this.state.keys];\n    const lettersFound = this.state.lettersFound;\n    let won = true; // Check clicked index in keys\n\n    const index = keys.findIndex(e => e.value === key); // Check if the clicked letter\n    // is in currentWord\n\n    keys[index].state = 'mismatched';\n\n    for (const letter of [...this.state.currentWord]) {\n      if (letter === key) {\n        keys[index].state = 'matched';\n        lettersFound.push(key);\n      }\n    } // Check if the word is totally found\n\n\n    for (const letter of [...this.state.currentWord]) {\n      if (!lettersFound.includes(letter)) {\n        won = false;\n      }\n    } // Update state of this compenent \n    // with the new performed values\n\n\n    this.setState({\n      keys,\n      lettersFound,\n      won\n    });\n  }\n\n  handleRestart() {\n    const {\n      keys,\n      currentWord,\n      lettersFound,\n      won\n    } = this.INITIALE_STATE;\n    this.setState({\n      keys,\n      currentWord,\n      lettersFound,\n      won\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => console.log(this.state),\n        children: \"DEBUG : Check state\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 23\n      }, this), /*#__PURE__*/_jsxDEV(PenduPic, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"pendu-img.png\",\n        alt: \"pendu\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Word, {\n          lettersFound: this.state.lettersFound,\n          currentWord: this.state.currentWord\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: this.state.keys.map(k => {\n          return /*#__PURE__*/_jsxDEV(Key, {\n            keyValue: k.value,\n            state: k.state,\n            onClick: value => {\n              this.handleKeyClick(value);\n            }\n          }, k.value, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 32\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Win, {\n        won: this.state.won,\n        onRestart: () => {\n          this.handleRestart();\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/nicolas/ReactJS/pendu1/src/App.js"],"names":["Component","Key","Word","Win","PenduPic","App","INITIALE_STATE","keys","map","l","value","state","currentWord","lettersFound","won","JSON","parse","stringify","handleKeyClick","key","index","findIndex","e","letter","push","includes","setState","handleRestart","render","console","log","k"],"mappings":"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","sourcesContent":["import './App.css';\nimport { Component } from 'react';\nimport Key from './Key'\nimport Word from './Word'\nimport Win from './Win';\nimport PenduPic from './PenduPic';\n\nclass App extends Component {\n\n    INITIALE_STATE = {\n\n        keys: [...'ABCDEFGHIJKLMNOPQRSTUVWXYZ'].map(l => {return {value: l, state: 'none'}}),\n\n        currentWord: 'MUUR',\n        lettersFound: [],\n        won: false\n    }\n\n    // Initialise the state\n    // Deep clone of INITIAL_START\n    // cause the spread copy make a shallow copy\n    // and note a \"hard copy\"\n    state = JSON.parse(JSON.stringify(this.INITIALE_STATE))\n\n    handleKeyClick(key) {\n\n        // Create copy of state variable\n        // that I'll change in this function\n        const keys = [...this.state.keys]\n        const lettersFound = this.state.lettersFound\n        let won = true\n\n        // Check clicked index in keys\n        const index = keys.findIndex(e => e.value === key )\n        \n        // Check if the clicked letter\n        // is in currentWord\n        keys[index].state = 'mismatched'\n        for(const letter of [...this.state.currentWord]) {\n\n            if(letter === key) {\n\n                keys[index].state = 'matched'\n                lettersFound.push(key)\n            }\n        }\n\n        // Check if the word is totally found\n        for(const letter of [...this.state.currentWord]) {\n\n            if( !lettersFound.includes(letter) ) {\n\n                won = false\n            }\n        }\n        \n        // Update state of this compenent \n        // with the new performed values\n        this.setState({ keys, lettersFound, won })\n    }\n\n    handleRestart() {\n\n        const { keys, currentWord, lettersFound, won} = this.INITIALE_STATE\n\n        this.setState({ keys, currentWord, lettersFound, won })\n    }\n\n    render() {\n\n        return (\n            <div className=\"App\">\n                <button onClick={() => console.log(this.state)}>DEBUG : Check state</button>\n                <br /><br />\n                <PenduPic />\n\n                <img \n                    src=\"pendu-img.png\"\n                    alt=\"pendu\"\n                />\n\n                <div>\n                    <Word \n                        lettersFound={this.state.lettersFound} \n                        currentWord={this.state.currentWord} \n                        />\n                </div>\n\n                <ul>\n                    {this.state.keys.map(k => {\n                        return <Key \n                            key={k.value} \n                            keyValue={k.value} \n                            state={k.state}\n                            onClick={(value) => {this.handleKeyClick(value)}}\n                            />\n                    })}\n                </ul>\n\n                <Win \n                    won={this.state.won}\n                    onRestart={() => {this.handleRestart()}}\n                    />\n            </div>\n        );\n    }\n  \n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}