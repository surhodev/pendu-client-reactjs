{"ast":null,"code":"var _jsxFileName = \"/Users/nicolas/ReactJS/pendu1/src/App.js\";\nimport './App.css';\nimport { Component } from 'react';\nimport Key from './Key';\nimport Word from './Word';\nimport Win from './Win';\nimport PenduPic from './PenduPic';\nimport Loose from './Loose';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.INITIALE_STATE = {\n      keys: [...'ABCDEFGHIJKLMNOPQRSTUVWXYZ'].map(l => {\n        return {\n          value: l,\n          state: 'none'\n        };\n      }),\n      currentWord: 'M',\n      guesses: 0,\n      lettersFound: [],\n      won: false,\n      loose: false\n    };\n    this.state = JSON.parse(JSON.stringify(this.INITIALE_STATE));\n  }\n\n  handleKeyClick(key) {\n    // Check is the game is win or loose\n    // to stop the game\n    if (this.state.won || this.state.loose) return; // Create copy of state variable\n    // that I'll change in this function\n\n    const keys = [...this.state.keys];\n    const lettersFound = this.state.lettersFound;\n    let won = true;\n    let loose = false;\n    let guesses = this.state.guesses; // Check clicked index in keys\n\n    const index = keys.findIndex(e => e.value === key); // Check if the clicked letter\n    // is in currentWord\n\n    keys[index].state = 'mismatched';\n\n    for (const letter of [...this.state.currentWord]) {\n      if (letter === key) {\n        keys[index].state = 'matched';\n        lettersFound.push(key);\n        continue;\n      }\n    } // Check if letter is not matched\n    // to increment guesses\n\n\n    if (keys[index].state !== 'matched') guesses++; // If the number of guesses is too high\n    // the player loose the game\n\n    if (guesses >= 8) loose = true; // Check if the word is totally found\n\n    for (const letter of [...this.state.currentWord]) {\n      if (!lettersFound.includes(letter)) won = false;\n    } // Update state of this compenent \n    // with the new performed values\n\n\n    this.setState({\n      keys,\n      lettersFound,\n      won,\n      loose,\n      guesses\n    });\n  }\n\n  handleRestart() {\n    const {\n      keys,\n      currentWord,\n      lettersFound,\n      won,\n      loose,\n      guesses\n    } = this.INITIALE_STATE;\n    this.setState({\n      keys,\n      currentWord,\n      lettersFound,\n      won,\n      loose,\n      guesses\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => console.log(this.state),\n        children: \"DEBUG : Check state\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 23\n      }, this), /*#__PURE__*/_jsxDEV(PenduPic, {\n        guesses: this.state.guesses\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 23\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Word, {\n          lettersFound: this.state.lettersFound,\n          currentWord: this.state.currentWord\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: this.state.keys.map(k => {\n          return /*#__PURE__*/_jsxDEV(Key, {\n            keyValue: k.value,\n            state: k.state,\n            onClick: value => {\n              this.handleKeyClick(value);\n            }\n          }, k.value, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 32\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Win, {\n        won: this.state.won,\n        onRestart: () => {\n          this.handleRestart();\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Loose, {\n        loose: this.state.loose,\n        onRestart: () => {\n          this.handleRestart();\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/nicolas/ReactJS/pendu1/src/App.js"],"names":["Component","Key","Word","Win","PenduPic","Loose","App","INITIALE_STATE","keys","map","l","value","state","currentWord","guesses","lettersFound","won","loose","JSON","parse","stringify","handleKeyClick","key","index","findIndex","e","letter","push","includes","setState","handleRestart","render","console","log","k"],"mappings":";AAAA,OAAO,WAAP;AACA,SAASA,SAAT,QAA0B,OAA1B;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,KAAP,MAAkB,SAAlB;;;AAEA,MAAMC,GAAN,SAAkBN,SAAlB,CAA4B;AAAA;AAAA;AAAA,SAExBO,cAFwB,GAEP;AAEbC,MAAAA,IAAI,EAAE,CAAC,GAAG,4BAAJ,EAAkCC,GAAlC,CAAsCC,CAAC,IAAI;AAAC,eAAO;AAACC,UAAAA,KAAK,EAAED,CAAR;AAAWE,UAAAA,KAAK,EAAE;AAAlB,SAAP;AAAiC,OAA7E,CAFO;AAIbC,MAAAA,WAAW,EAAE,GAJA;AAMbC,MAAAA,OAAO,EAAE,CANI;AAObC,MAAAA,YAAY,EAAE,EAPD;AAQbC,MAAAA,GAAG,EAAE,KARQ;AASbC,MAAAA,KAAK,EAAE;AATM,KAFO;AAAA,SAkBxBL,KAlBwB,GAkBhBM,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAe,KAAKb,cAApB,CAAX,CAlBgB;AAAA;;AAoBxBc,EAAAA,cAAc,CAACC,GAAD,EAAM;AAEhB;AACA;AACA,QAAG,KAAKV,KAAL,CAAWI,GAAX,IAAkB,KAAKJ,KAAL,CAAWK,KAAhC,EACI,OALY,CAOhB;AACA;;AACA,UAAMT,IAAI,GAAG,CAAC,GAAG,KAAKI,KAAL,CAAWJ,IAAf,CAAb;AACA,UAAMO,YAAY,GAAG,KAAKH,KAAL,CAAWG,YAAhC;AACA,QAAIC,GAAG,GAAG,IAAV;AACA,QAAIC,KAAK,GAAG,KAAZ;AACA,QAAIH,OAAO,GAAG,KAAKF,KAAL,CAAWE,OAAzB,CAbgB,CAehB;;AACA,UAAMS,KAAK,GAAGf,IAAI,CAACgB,SAAL,CAAeC,CAAC,IAAIA,CAAC,CAACd,KAAF,KAAYW,GAAhC,CAAd,CAhBgB,CAkBhB;AACA;;AACAd,IAAAA,IAAI,CAACe,KAAD,CAAJ,CAAYX,KAAZ,GAAoB,YAApB;;AACA,SAAI,MAAMc,MAAV,IAAoB,CAAC,GAAG,KAAKd,KAAL,CAAWC,WAAf,CAApB,EAAiD;AAE7C,UAAGa,MAAM,KAAKJ,GAAd,EAAmB;AAEfd,QAAAA,IAAI,CAACe,KAAD,CAAJ,CAAYX,KAAZ,GAAoB,SAApB;AACAG,QAAAA,YAAY,CAACY,IAAb,CAAkBL,GAAlB;AACA;AACH;AACJ,KA7Be,CA+BhB;AACA;;;AACA,QAAGd,IAAI,CAACe,KAAD,CAAJ,CAAYX,KAAZ,KAAsB,SAAzB,EACIE,OAAO,GAlCK,CAoChB;AACA;;AACA,QAAGA,OAAO,IAAI,CAAd,EACIG,KAAK,GAAG,IAAR,CAvCY,CAyChB;;AACA,SAAI,MAAMS,MAAV,IAAoB,CAAC,GAAG,KAAKd,KAAL,CAAWC,WAAf,CAApB,EAAiD;AAE7C,UAAI,CAACE,YAAY,CAACa,QAAb,CAAsBF,MAAtB,CAAL,EACIV,GAAG,GAAG,KAAN;AACP,KA9Ce,CAgDhB;AACA;;;AACA,SAAKa,QAAL,CAAc;AAAErB,MAAAA,IAAF;AAAQO,MAAAA,YAAR;AAAsBC,MAAAA,GAAtB;AAA2BC,MAAAA,KAA3B;AAAkCH,MAAAA;AAAlC,KAAd;AACH;;AAEDgB,EAAAA,aAAa,GAAG;AAEZ,UAAM;AAAEtB,MAAAA,IAAF;AAAQK,MAAAA,WAAR;AAAqBE,MAAAA,YAArB;AAAmCC,MAAAA,GAAnC;AAAwCC,MAAAA,KAAxC;AAA+CH,MAAAA;AAA/C,QAA0D,KAAKP,cAArE;AAEA,SAAKsB,QAAL,CAAc;AAAErB,MAAAA,IAAF;AAAQK,MAAAA,WAAR;AAAqBE,MAAAA,YAArB;AAAmCC,MAAAA,GAAnC;AAAwCC,MAAAA,KAAxC;AAA+CH,MAAAA;AAA/C,KAAd;AACH;;AAEDiB,EAAAA,MAAM,GAAG;AAEL,wBACI;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA,8BACI;AAAQ,QAAA,OAAO,EAAE,MAAMC,OAAO,CAACC,GAAR,CAAY,KAAKrB,KAAjB,CAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAA;AAAA;AAAA;AAAA,cAFJ,eAEU;AAAA;AAAA;AAAA;AAAA,cAFV,eAII,QAAC,QAAD;AAAU,QAAA,OAAO,EAAE,KAAKA,KAAL,CAAWE;AAA9B;AAAA;AAAA;AAAA;AAAA,cAJJ,eAMI;AAAA;AAAA;AAAA;AAAA,cANJ,eAMU;AAAA;AAAA;AAAA;AAAA,cANV,eAQI;AAAA,+BACI,QAAC,IAAD;AACI,UAAA,YAAY,EAAE,KAAKF,KAAL,CAAWG,YAD7B;AAEI,UAAA,WAAW,EAAE,KAAKH,KAAL,CAAWC;AAF5B;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cARJ,eAeI;AAAA,kBACK,KAAKD,KAAL,CAAWJ,IAAX,CAAgBC,GAAhB,CAAoByB,CAAC,IAAI;AACtB,8BAAO,QAAC,GAAD;AAEH,YAAA,QAAQ,EAAEA,CAAC,CAACvB,KAFT;AAGH,YAAA,KAAK,EAAEuB,CAAC,CAACtB,KAHN;AAIH,YAAA,OAAO,EAAGD,KAAD,IAAW;AAAC,mBAAKU,cAAL,CAAoBV,KAApB;AAA2B;AAJ7C,aACEuB,CAAC,CAACvB,KADJ;AAAA;AAAA;AAAA;AAAA,kBAAP;AAMH,SAPA;AADL;AAAA;AAAA;AAAA;AAAA,cAfJ,eA0BI,QAAC,GAAD;AACI,QAAA,GAAG,EAAE,KAAKC,KAAL,CAAWI,GADpB;AAEI,QAAA,SAAS,EAAE,MAAM;AAAC,eAAKc,aAAL;AAAqB;AAF3C;AAAA;AAAA;AAAA;AAAA,cA1BJ,eA+BI,QAAC,KAAD;AACI,QAAA,KAAK,EAAE,KAAKlB,KAAL,CAAWK,KADtB;AAEI,QAAA,SAAS,EAAE,MAAM;AAAC,eAAKa,aAAL;AAAqB;AAF3C;AAAA;AAAA;AAAA;AAAA,cA/BJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAsCH;;AAxHuB;;AA4H5B,eAAexB,GAAf","sourcesContent":["import './App.css';\nimport { Component } from 'react';\nimport Key from './Key'\nimport Word from './Word'\nimport Win from './Win';\nimport PenduPic from './PenduPic';\nimport Loose from './Loose';\n\nclass App extends Component {\n\n    INITIALE_STATE = {\n\n        keys: [...'ABCDEFGHIJKLMNOPQRSTUVWXYZ'].map(l => {return {value: l, state: 'none'}}),\n\n        currentWord: 'M',\n\n        guesses: 0,\n        lettersFound: [],\n        won: false,\n        loose: false\n    }\n\n    // Initialise the state\n    // Deep clone of INITIAL_START\n    // cause the spread copy make a shallow copy\n    // and note a \"hard copy\"\n    state = JSON.parse(JSON.stringify(this.INITIALE_STATE))\n\n    handleKeyClick(key) {\n\n        // Check is the game is win or loose\n        // to stop the game\n        if(this.state.won || this.state.loose) \n            return\n\n        // Create copy of state variable\n        // that I'll change in this function\n        const keys = [...this.state.keys]\n        const lettersFound = this.state.lettersFound\n        let won = true\n        let loose = false\n        let guesses = this.state.guesses\n\n        // Check clicked index in keys\n        const index = keys.findIndex(e => e.value === key )\n        \n        // Check if the clicked letter\n        // is in currentWord\n        keys[index].state = 'mismatched'\n        for(const letter of [...this.state.currentWord]) {\n\n            if(letter === key) {\n\n                keys[index].state = 'matched'\n                lettersFound.push(key)\n                continue;\n            }\n        }\n\n        // Check if letter is not matched\n        // to increment guesses\n        if(keys[index].state !== 'matched')\n            guesses++\n\n        // If the number of guesses is too high\n        // the player loose the game\n        if(guesses >= 8)\n            loose = true\n\n        // Check if the word is totally found\n        for(const letter of [...this.state.currentWord]) {\n\n            if( !lettersFound.includes(letter) )\n                won = false\n        }\n        \n        // Update state of this compenent \n        // with the new performed values\n        this.setState({ keys, lettersFound, won, loose, guesses })\n    }\n\n    handleRestart() {\n\n        const { keys, currentWord, lettersFound, won, loose, guesses} = this.INITIALE_STATE\n\n        this.setState({ keys, currentWord, lettersFound, won, loose, guesses })\n    }\n\n    render() {\n\n        return (\n            <div className=\"App\">\n                <button onClick={() => console.log(this.state)}>DEBUG : Check state</button>\n                <br /><br />\n\n                <PenduPic guesses={this.state.guesses}/>\n\n                <br /><br />\n\n                <div>\n                    <Word \n                        lettersFound={this.state.lettersFound} \n                        currentWord={this.state.currentWord} \n                        />\n                </div>\n\n                <ul>\n                    {this.state.keys.map(k => {\n                        return <Key \n                            key={k.value} \n                            keyValue={k.value} \n                            state={k.state}\n                            onClick={(value) => {this.handleKeyClick(value)}}\n                            />\n                    })}\n                </ul>\n\n                <Win \n                    won={this.state.won}\n                    onRestart={() => {this.handleRestart()}}\n                    />\n                \n                <Loose\n                    loose={this.state.loose}\n                    onRestart={() => {this.handleRestart()}}\n                    />\n            </div>\n        );\n    }\n  \n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}